import java.io.File;
import edu.duke.*;
import org.apache.commons.csv.*;

public class BabyName {

    public void totalBirths() {
		// TODO Auto-generated method stub

		//get the file, 
		FileResource fr = new FileResource();
		
		//get the CSV, parser the CSV
		int numGirl = 0;
		int numBoy = 0;
		int sum = 0;
		for(CSVRecord record : fr.getCSVParser(false)){
			String gender = record.get(1);
			int num = Integer.parseInt(record.get(2));
			
			if(gender.equals("F")) numGirl ++;
			else numBoy ++;
			
			sum ++;
			
		}//end for csvrecord loop;
		
		
		//printout num of girls, boys, and total
		System.out.println("Girls: " + numGirl +", Boys: " + numBoy +", Total: " + sum);
		
	}//end of totalBirths() method;
	
	
	public int getRank(int year, String name, String gender) {
		// TODO Auto-generated method stub

		//get the file
		FileResource fr = new FileResource();
				
		int pivot = 0;
		
		for(CSVRecord record : fr.getCSVParser(false)){
			
			//for female records
			if(record.get(1).equals(gender)) {
				
				//the pivot of equal gender ++
				pivot++;
				if(record.get(0).equals(name)) return pivot;
			
			}
			
		}//end for CSV record loop;
			
		return -1;
			
	}//end getRank() method;
	
	public void getRank(){
	            int year = 1971;
	            String name = "Frank";
	            String gender = "M";
	            int rank= getRank(year,name,gender);
	    		System.out.println("The name " + name + " gender " + gender + " ranks " + rank + " at year " + year);
}

public String getName(int year, int rank, String gender) {
		// TODO Auto-generated method stub
		
		//get the file
		FileResource fr = new FileResource();
		
		int pivot = 0;
		//get the CSV file
		for(CSVRecord record : fr.getCSVParser(false)){
			
			if(record.get(1).equals(gender)){ 
				
				pivot ++;
				if(pivot == rank) return record.get(0);
			}//
			
		}//end for CSV record loop;
		
		System.out.println("the rank: " + rank + "... The last one rank " + pivot + ".");
		return "NO NMAE";
		
	}
	
	public void getName(){
	            int year = 1982;
		        int rank = 450;
		        String gender = "M";
		        String rankName = getName(year, rank, gender);
		        System.out.println("The " + gender + " name ranked " + rank + " is: " + rankName +". " );
}

public void whatIsNameInYear() {
		// TODO Auto-generated method stub
        int year1 = 1974;
		int year2 = 2014;
		String gender = "M";
		String name = "Owen";
		int rank = getRank(year1, name, gender);
		//System.out.println(name + " ranks " + rank + " at year " + year1);
		String equalName = getName(year2, rank, gender);
		
		//Isabella born in 2012 would be Sophia if she was born in 2014.
		System.out.println( name + " born in " + year1 + " would be " + equalName + " if she was born in " + year2);
		
	}//end whatIsNameInYear() method;
	
	public void yearOfHighestRank() {
		// TODO Auto-generated method stub
		
		//initial year and rank;
		String name = "Mich"; 
		String gender = "M";
		int rank = 1000000;
		int yearHigh = 0;
		
		//get the directory:
		DirectoryResource dr = new DirectoryResource();
		
		//get the files
		for(File fi : dr.selectedFiles()){
			
			//get the name of the file, which contains the year
			String fileName = fi.getName();
			
			//get the year integer from the name of the file
			int year = Integer.parseInt(fileName.replaceAll("[\\D]", ""));
			
			//get the FileResource
			FileResource fr = new FileResource(fi);
			int currRank = -1;
			int pivot = 0;
			for(CSVRecord record : fr.getCSVParser(false)){
				
				if(record.get(1).equals(gender)) {
					
					pivot++;
								
					if(record.get(0).equals(name)) {
						currRank = pivot;
						break;
					}
					
				}
				
			}//end for loop;
			
			//int currRank = getRank(year, name, gender);
		//	System.out.println("  At year " + year + " name " + name + " gender " + gender + " ranks " + currRank + ". ");
			
			if(currRank != -1 && currRank < rank){
				rank = currRank;
				yearHigh = year;
			}//end if condition;
		
		}//end for File fi loop;
		
		System.out.println("The highest rank for the name " + name + " gender " + gender + " is at year " + yearHigh);
	}
	
		public void getAverageRank() {
		// TODO Auto-generated method stub
		//get director
		String name = "Robert";
		String gender = "M";
		DirectoryResource dr = new DirectoryResource();
		int fileNum = 0;
		int totalRank = 0;
		double aveRank;
		
		for(File fi : dr.selectedFiles()){
			fileNum++;
			
			//get the file resource
			FileResource fr = new FileResource(fi);
			
			int pivot = 0;
			int currRank = 0;
			for(CSVRecord record : fr.getCSVParser(false) ){
				
				if(record.get(1).equals(gender)) {pivot++;
				
					if(record.get(0).equals(name)) {
					
						currRank = pivot;
						break;
					
					} //end if record.equals name condition;
				}
				
			}//end for Record loop;
			
			totalRank += currRank;
			
		}//end for file loop;
		
		if(totalRank == 0){
		    aveRank = -1;
		  }    
		else {
		    aveRank = (totalRank)/fileNum;
		  }
		System.out.println("The average rank of " + name + " gender " + gender + " is " + aveRank);
}

public  int getTotalBirthsRankedHigher(int year, String name, String gender) {
		// TODO Auto-generated method stub
		FileResource fr = new FileResource();
		
		int sum = 0;
		for(CSVRecord record : fr.getCSVParser(false)){
			
			if(record.get(1).equals(gender)){
				
				if(record.get(0).equals(name)) return sum;
				
				sum += Integer.parseInt(record.get(2));
								
			}//end if record euqals gender condition;
			
		}//end for CSV record record;
		
		return sum;
	}
	
	public void getTotalRanks(){
	    int year = 1990;
		String name = "Drew";
		String gender = "M";
		
		int totalBirthHigher = getTotalBirthsRankedHigher(year, name, gender);
		System.out.println("The total " + gender + " births at year " + year + " ranks higher than " + name + " is: " + totalBirthHigher);
}
	
}
